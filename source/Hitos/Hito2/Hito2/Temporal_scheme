
from numpy import array, zeros, linspace, arange
import matplotlib.pyplot as plt
from scipy.optimize import fsolve, newton

## HITO 2 TEMPORAL SCHEMES

def F_Cauchy(U, t=0): # df/dx = x
    x = U[0]
    return x

def F_Kepler(U, t=0):
 
    x, y, vx, vy = [U[0], U[1], U[2], U[3]]
    mr = (x**2 + y**2) ** 1.5
    
    return array( [vx, vy, -x/mr, -y/mr] )

def Euler(U,F,i):
    
    return U[:,i] + dt * F(U[:,i])
    
def Crank_Nicolson(U,F,i):
    
    def g(x):
        return x - a -dt/2 * (F(a) + F(x))
    a = U[:,i]
    
    return newton(g, U[:,i])

def RK4(U,F,i):
    
    k1 = F( U[:,i], t )
    k2 = F( U[:,i] +k1*dt/2, t + dt/2 )
    k3 = F( U[:,i] +k2*dt/2, t + dt/2 )
    k4 = F( U[:,i] + k3*dt, t + dt )
     
    k = 1/6 * (k1 + 2*k2 + 2*k3 + k4)
    
    return U[:,i] + dt * k

def Inverse_Euler(U,F,i):
    def g(x):
        return x - a - dt * F(x,t) 
    a = U[:,i]
    
    return newton(g, U[:,i])




